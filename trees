# -*- coding: utf-8 -*-
from math import log
import operator

class trees():
    def createDataSet(self):
        dataSet = [[1, 1, 'yes'], [1, 1, 'yes'], [1, 0, 'no'], [0, 1, 'no'], [0, 1, 'no']]
        labels = ['no surfacing', 'flippers']
        return dataSet, labels

    # 计算香农熵
    def calcShannonEnt(self, dataSet):
        numEntries = len(dataSet)
        labelCounts = {}
        for featVec in dataSet:
            currentLabel = featVec[-1]
            if currentLabel not in labelCounts.keys():
                labelCounts[currentLabel] = 0
            labelCounts[currentLabel] += 1
        shannonEnt = 0.0
        for key in labelCounts:
            prob = float(labelCounts[key])/numEntries  #prob为选择这个分类的概率
                                                       #计算香农熵,这里shannonEnt需要根据P(xi)来计算，P(xi)表示选择这个类型所发生的概率，
            shannonEnt -= prob * log(prob, 2)          # 然后将所有类型进行叠加
        return shannonEnt

    #用于将数据集根据目标（即：axis）的值要求（即：value），返回这个与这个目标相同的数据集
    def splitDataSet(self, dataSet, axis, value):
        retDataSet = []
        print dataSet
        for featVec in dataSet:
            if featVec[axis] == value:
                reducedFeatVec = featVec[:axis]          #把目标值前面的数据取出来
                print(featVec[axis+1:])
                reducedFeatVec.extend(featVec[axis+1:])  #把目标值后面的数据取出来，并extend到reducedFeatVec
                retDataSet.append(reducedFeatVec)        #把reducedFeatVec列表append到retDataSet并进行返回
        return retDataSet

    def chooseBestFeatureToSplit(self, dataSet):
        numFeatures = len(dataSet[0]) - 1               #将最后一个元素作为类别标签
        baseEntropy = self.calcShannonEnt(dataSet)      #原始香农熵
        bestInfoGain = 0.0
        bestFeature = -1
        for i in range(numFeatures):
            featList = [example[i] for example in dataSet]  # 用第i列的特征值新建一个数组
            uniqueVals = set(featList)  # 用set获取一个不重复的特征值set
            newEntropy = 0.0
            for value in uniqueVals:
                subDataSet = self.splitDataSet(dataSet, i, value)
                prob = len(subDataSet) / float(len(dataSet))
                newEntropy += prob * self.calcShannonEnt(subDataSet)
            infoGain = baseEntropy - newEntropy  # infoGain为信息增益 ，即老香农熵 - 新的香农熵
            if (infoGain > bestInfoGain):  #
                bestInfoGain = infoGain  # 取信息增益最大的值，并返回这个列序号
                bestFeature = i
        return bestFeature  # returns an integer

t = trees()
dataSet, labels = t.createDataSet()
print(t.splitDataSet(dataSet, 0, 1))

